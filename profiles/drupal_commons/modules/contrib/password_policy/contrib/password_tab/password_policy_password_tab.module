<?php
// $Id: password_policy_password_tab.module,v 1.5 2009/08/27 11:05:20 miglius Exp $

/**
 * @file
 * The password policy password tab module adds a separate tab to change password.
 */

//////////////////////////////////////////////////////////////////////////////

define('PASSWORD_POLICY_PASSWORD_TAB_REDIRECT', variable_get('password_policy_password_tab_redirect', ''));

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_menu().
 */
function password_policy_password_tab_menu() {
  return array(
    'admin/settings/password_policy/password_tab' => array(
      'title' => 'Password tab',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('password_policy_password_tab_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'password_policy_password_tab.admin.inc',
    ),
    'user/%user/password' => array(
      'title' => 'Password',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('password_policy_password_tab', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'password_policy_password_tab.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_menu_alter().
 */
function password_policy_password_tab_menu_alter(&$callbacks) {
  $callbacks['user/reset/%/%/%']['page arguments'][0] = 'password_policy_password_tab_pass_reset';
  unset($callbacks['user/reset/%/%/%']['file']);
}

/**
 * Implementation of hook_form_alter().
 */
function password_policy_password_tab_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case "user_profile_form":
      unset($form['account']['pass']);
      break;
  }
}

/**
 * Menu callback; process one time login link and redirects to the user page on success.
 *
 * This function is a slightly changed user_pass_reset() function. The only change is
 * a redirection after the user has used a one time login link. The user is redirected
 * to the password change tab instead of the account edit form.
 */
function password_policy_password_tab_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // Check if the user is already logged in. The back button is often the culprit here.
  if ($user->uid) {
    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = time();
    // Some redundant checks for extra security ?
    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      else if ($account->uid && $timestamp > $account->login && $timestamp < $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_authenticate_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_authenticate_finalize($form_state['values']);
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));
          drupal_goto('user/'. $user->uid .'/password');
        }
        else {
          $form['message'] = array('#value' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to login to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#value' => '<p>'. t('This login can be used only once.') .'</p>');
          $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
      exit;
    }
  }
}

