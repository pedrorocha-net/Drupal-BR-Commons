<?php
// $Id: context_og.module,v 1.1.2.1 2010/08/29 21:42:09 marcp Exp $

function context_og_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

function context_og_context_plugins() {
  $plugins = array();
  $plugins['context_og_condition_group_node'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'context_og') . '/plugins',
      'file' => 'context_og_condition_group_node.inc',
      'class' => 'context_og_condition_group_node',
      'parent' => 'context_condition',
    ),
  );
  $plugins['context_og_condition_group_type'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'context_og') . '/plugins',
      'file' => 'context_og_condition_group_type.inc',
      'class' => 'context_og_condition_group_type',
      'parent' => 'context_condition',
    ),
  );
  $plugins['context_og_reaction_set_group_context'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'context_og') . '/plugins',
      'file' => 'context_og_reaction_set_group_context.inc',
      'class' => 'context_og_reaction_set_group_context',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implementation of hook_context_registry().
 */
function context_og_context_registry() {
  return array(
    'conditions' => array(
      'context_og_condition_group_node' => array(
        'title' => t('OG - group node context'),
        'description' => t("Set this context when viewing a node or other page that is in any of the selected groups."),
        'plugin' => 'context_og_condition_group_node',
      ),
      'context_og_condition_group_type' => array(
        'title' => t('OG - group type context'),
        'description' => t("Set this context when viewing a node or other page that is in any group of the selected types.  Select <em>Not in a group</em> to also set the context when viewing a node or other page that is not in any group."),
        'plugin' => 'context_og_condition_group_type',
      ),
    ),
    'reactions' => array(
      'context_og_reaction_set_group_context' => array(
        'title' => t('OG - set group context'),
        'description' => t("Set this group's context."),
        'plugin' => 'context_og_reaction_set_group_context',
      ),
    ),
  );
}

/**
 * Implementation of hook_context_page_condition().
 * 
 * This needs to run after Organic Groups' hook_init() because we need the group context to be set.
 * 
 * It also needs to run after Views processes arguments because og_views provides argument handlers
 * that set OG's group context.
 */
function context_og_context_page_condition() {
  $group = og_get_group_context();

  // Only execute the group node context condition if there is a group node
  // in context.
  if ($group) {
    $plugin = context_get_plugin('condition', 'context_og_condition_group_node');
    if ($plugin) {
      $plugin->execute($group);
    }
  }

  // Execute the group type context condition all the time because we want
  // to use that condition to be able to check for "no group context."
  $plugin = context_get_plugin('condition', 'context_og_condition_group_type');
  if ($plugin) {
    $plugin->execute($group);
  }
}

/**
 * Implementation of hook_init().
 *
 * Execute the "set group context" reaction here so that our conditions will work
 * when they get executed.  We want to come after organic groups' hook_init() so
 * the context doesn't get switched out from under us.
 */
function context_og_init() {
  $plugin = context_get_plugin('reaction', 'context_og_reaction_set_group_context');
  if ($plugin) {
    $plugin->execute();
  }
}
