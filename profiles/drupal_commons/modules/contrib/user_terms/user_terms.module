<?php
// $Id: user_terms.module,v 1.1.2.25 2010/03/19 22:23:33 joachim Exp $

/**
 * @file
 *   Provides a simple means of associating a user with taxonomy terms.
 */


define('USER_TERMS_GROUP_TITLE', t('User terms'));


/**
 * Implementation of hook_help().
 */
function user_terms_help($path, $arg) {
  switch ($path) {
    case 'admin/help#user_terms':
      return t("<p>The user terms module allows you to apply vocabularies to users. Users may then select terms from these vocabularies on either their account edit page or Profile modules category pages, and thus tag themselves in the same way as nodes.</p>");
    case 'admin/user/user_terms':
      return t("<p>Choose which vocabularies to apply to user accounts, where users select terms from these, and the manner in which they are displayed on the user account page.</p>");
  }
}


/**
 * Implementation of hook_menu().
 */
function user_terms_menu() {
  $items = array();

  $items['admin/user/user_terms'] = array(
    'title'             => t('User terms'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('user_terms_settings'),
    'file'              => 'user_terms.admin.inc',
    'access arguments'  => array('administer users'),
    'type'              => MENU_NORMAL_ITEM,
    'description'       => t('Configure user terms vocabulary settings.'),
  );

  return $items;
}


/**
 * Implementation of hook_user().
 */
function user_terms_user($op, &$edit, &$account, $category = NULL) {
  // Should user terms be displayed in the interface?
  $display = TRUE;
  if (module_exists('profile')) {
    $profile_page = variable_get('user_terms_profile_path', 'account');
    if ($category && ($category != $profile_page)) {
      $display = FALSE;
    }
  }

  switch ($op) {
    // The user account is being loaded.
    case 'load':
      return user_terms_load_profile($account);

    // The user account registration form is about to be displayed. 
    // The module should present the form elements it wishes to inject into the form.
    case 'register':
      // This should become optional in the next version
      // Let's just remove it for now      
      //return $display ? user_terms_form_profile($edit, $account, $category, TRUE) : '';

    // The user account is being added. 
    // The module should save its custom additions to the user object into the 
    // database and set the saved fields to NULL in $edit.
    case 'insert':
      user_terms_save_profile($edit, $account, $category, TRUE);
      break;

    // The user's account information is being displayed.
    // The module should format its custom additions for display, 
    // and add them to the $account->content array.
    case 'view':
      return user_terms_view_profile($account);

    // The user account edit form is about to be displayed.
    // The module should present the form elements it wishes to inject into the form.
    case 'form':
      return $display ? user_terms_form_profile($edit, $account, $category) : '';

    // The user account is being changed. 
    // The module should save its custom additions to the user object into the 
    // database and set the saved fields to NULL in $edit.
    // TODO: This method doesn't seem to work because it's stored on a page generated by profile.module
    case 'update':
      return $display ? user_terms_save_profile($edit, $account, $category) : '';

    // The user account is being deleted. 
    // The module should remove its custom additions to the user object from the database. 
    case 'delete':
      db_query('DELETE FROM {term_user} WHERE uid = %d', $account->uid);
  }
}


/**
 * Load the user's profile.
 *
 * @param &$account
 *   The account from which data is loaded.
 */
function user_terms_load_profile(&$account) {
  $terms  = array();
  $query = "SELECT u.tid, t.vid, t.name FROM {term_user} u 
              INNER JOIN {term_data} t ON t.tid = u.tid 
              INNER JOIN {vocabulary} v ON t.vid = v.vid 
              WHERE u.uid = %d
              ORDER BY v.weight, t.weight, t.name";
  $result = db_query($query, $account->uid);

  while ($term = db_fetch_array($result)) {
    $terms[$term['tid']] = $term;
  }

  $account->user_terms = $terms;
}


/**
 * View the user's profile.
 *
 * @param &$account
 *   The account from which data is loaded and displayed.
 */
function user_terms_view_profile(&$account) {
  $vids = variable_get('user_terms_vocabs', '');

  // Skip everything if no user term vocabulary is selected or
  // the user has no terms.
  if (!empty($vids) && !empty($account->user_terms)) {
    
    // Create the main profile category.
    $account->content['user_terms'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('User terms'),
      '#weight' => 4,
    );
    
    // Should terms be grouped?
    if (variable_get('user_terms_group_terms', FALSE)) {
      user_terms_view_profile_grouped($account, $vids);
    }
    else {
      user_terms_view_profile_separated($account, $vids);
    }
  }
}

/**
 * Show terms on the user's profile as a single group.
 */
function user_terms_view_profile_grouped(&$account, $vids) {
  $terms = $account->user_terms;
  $term_names = array();

  foreach ($terms as $tid => $term) {
    // Check if each term's vocab is actually enabled
    if (in_array($term['vid'], $vids)) {
      $term_names[] = check_plain($terms[$tid]['name']);
    }
  }

  if (!empty($term_names)) {
    user_terms_view_profile_item($account, 'user_terms', variable_get('user_terms_group_title', USER_TERMS_GROUP_TITLE), $term_names);
  }
}


/**
 * Show terms on the user's profile by vocabulary.
 */
function user_terms_view_profile_separated(&$account, $vids) {
  $terms = $account->user_terms;

  foreach ($vids as $vid) {

    $term_names = array();
    
    foreach ($terms as $tid => $term) {
      if ($term['vid'] == $vid) {
        $term_names[] = check_plain($terms[$tid]['name']);
        unset($terms[$tid]);
      }
    }

    if (!empty($term_names)) {
      $vocab = taxonomy_vocabulary_load($vid);
      user_terms_view_profile_item($account, 'user_terms_' . $vid, $vocab->name, $term_names, $vocab->weight);
    }
  }
}

/**
 * Add a single profile item of taxonomy terms to the user account.
 */
function user_terms_view_profile_item(&$account, $item_key, $item_title, $term_names, $weight = 0) {
  // Provide a default title if one doesn't exist
  if (empty($item_title)) {
    $item_title = t('User terms');
  }

  $account->content['user_terms'][$item_key] = array(
    '#type' => 'user_profile_item',
    '#title' => check_plain($item_title),
    '#value' => theme('item_list', $term_names),
    '#weight' => $weight,
  );
}


/**
 * Edit a user's profile or register a new account.
 *
 * @param &$account
 *   The account from which data is loaded and displayed.
 */
function user_terms_form_profile($edit, $account, $category, $register = FALSE) {
  // Check for user_terms_override_selector, so other modules can intercept 
  // before hook_form_alter and provide scalable alternatives.
  // This is the same approach as taxonomy_form_alter().
  if (!variable_get('user_terms_override_selector', FALSE)) {
    $form  = array();
    $vids = variable_get('user_terms_vocabs', '');

    // Skip everything if no user term vocabulary is selected.
    if (!empty($vids)) {
      $default = NULL;
      if (!$register) {
        $user = user_load(array('uid' =>  $account->uid));
        $default = empty($user->user_terms) ? array() : array_keys($user->user_terms);
      }

      $form['user_terms'] = array(
        '#type' => 'fieldset',
        '#title' => t('User terms'),
      );

      foreach ($vids as $vid)  {
        // Use taxonomy module's form element builder function.
        $vocabulary = taxonomy_vocabulary_load($vid);
        
        if ($vocabulary->tags) {
          // Free tagging requires certain content permissions for autocomplete to work
          if (!user_access('access content')) {
            return;
          }
          
          $default_terms = array();
          if (isset($account->user_terms)) {
            foreach ($account->user_terms as $term) {
              if (isset($term['vid']) && $term['vid'] == $vid) {
                $default_terms[] = $term['name'];
              }
            }
          }
                    
          if ($vocabulary->help) {
            $help = filter_xss_admin($vocabulary->help);
          }
          else {
            $help = t('A comma-separated list of terms describing this content. Example: funny, bungee jumping, "Company, Inc.".');
          }
   
          $form['user_terms']['user_terms_' . $vocabulary->vid] = array('#type' => 'textfield',
            '#title' => $vocabulary->name,
            '#description' => $help,
            '#default_value' => $default_terms ? implode(', ', $default_terms) : '',
            '#autocomplete_path' => 'taxonomy/autocomplete/'. $vocabulary->vid,
            '#weight' => $vocabulary->weight,
            '#maxlength' => 1024,
          );
          
          // Indicate that we're using free tags
          $form['user_terms']['user_terms_tags_' . $vocabulary->vid] = array(
            '#type'=> 'hidden',
            '#value' => TRUE,
          );
        }
        else {
          $default_terms = array();
          if (isset($account->user_terms)) {
            foreach ($account->user_terms as $term) {
              if (isset($term['vid']) && $term['vid'] == $vid) {
                $default_terms[$term['tid']] = $term;
              }
            }
          }
          
          $form['user_terms']['user_terms_' . $vid]  = taxonomy_form($vid, array_keys($default_terms), NULL, 'taxonomy');
          $form['user_terms']['user_terms_' . $vid]['#weight'] = $vocabulary->weight;
          $form['user_terms']['user_terms_' . $vid]['#required'] = $vocabulary->required;
        }
      }
    }

    // Set a hidden value on the form so that we can check in user_terms_save_profile()
    // that we've actually come from the account edit form.
    $form['user_terms_vids'] = array(
      '#type' => 'value', 
      '#value' => $vids,
    );

    return $form;
  }
}

/**
 * Save a user's profile or register a new account.
 *
 * @param &$account
 *   The account from which data is loaded and displayed.
 */
function user_terms_save_profile(&$edit, &$account, $category, $register = FALSE) {
  // Check for the presence of our hidden value set in user_terms_form_profile().
  // If it is not set, then we have come here from something that is not a 
  // user edit form, eg a user admin operation such as 'block user', and
  // have no data about user terms to save. Leave now!
  if (!isset($edit['user_terms_vids'])) {
    return; 
  }

  $vids = variable_get('user_terms_vocabs', '');

  // Merge all terms into one array
  $user_terms = array();
  foreach ($vids as $vid) {
    // Free tags come in a string without tids
    if ($edit['user_terms_tags_' . $vid]) {
      $input_tags = drupal_explode_tags($edit['user_terms_' . $vid]);
      
      foreach ($input_tags as $input_tag) {
        // See if the term exists in the chosen vocabulary
        // and return the tid; otherwise, add a new record.
        $possibilities = taxonomy_get_term_by_name($input_tag);
        $input_tag_tid = NULL; // tid match, if any.
        foreach ($possibilities as $possibility) {
          if ($possibility->vid == $vid) {
            $input_tag_tid = $possibility->tid;
          }
        }

        if (!$input_tag_tid) {
          $t = array('vid' => $vid, 'name' => $input_tag);
          $status = taxonomy_save_term($t);
          $input_tag_tid = $t['tid'];
        }
        
        $user_terms[] = $input_tag_tid;
      }
    }
    else {
      // Depending on the type of field widget, this may be an array or a string.
      if (is_array($edit['user_terms_' . $vid])) {
        $user_terms = array_merge($user_terms, (array)$edit['user_terms_' . $vid]);
      }
      else {
        $user_terms[] = $edit['user_terms_' . $vid];
      }
    }
    $edit['user_terms_' . $vid] = NULL;
  }

  // Clear existing if not inserting.
  if (!$register) {
    $query = "DELETE FROM {term_user} WHERE uid = %d";
    db_query($query, $account->uid);
  }

  // Persist the new data.
  $query = "INSERT IGNORE INTO {term_user} (uid, tid) VALUES (%d, %d)";

  // Save all terms (except zeros).
  foreach (array_filter($user_terms) as $tid) {
    db_query($query, $account->uid, $tid);
  }
}


/**
 * Implementation of hook_views_api().
 */
function user_terms_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'user_terms'),
  );
}
